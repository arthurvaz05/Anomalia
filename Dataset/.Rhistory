}
prob_dist <-  function(data, limiar) {
print(data)
distribution_list <- c("gamma", "lnorm", "exp", "gamma", "unif", "logis", "norm")
fits <- list()
for (dist in distribution_list) {
tryCatch({
fits[[dist]] <- fitdist(data, dist)
}, error = function(e) {
cat("Error fitting distribution", dist, ": ", conditionMessage(e), "\n")
})
}
gof_stats <- lapply(fits, gofstat)
best_fit_idx <- which.min(sapply(gof_stats, function(x) x$bic))
best_fit <- names(best_fit_idx)
if (is.null(best_fit)) {
fits <- list(
best_fit = "Not Suitable",
gof = NULL,
is_anomaly = FALSE,
anomalias = numeric(0)
)
return(fits)
} else {
best_fit <- strsplit(best_fit, "-")[[1]][3]
}
params <- as.list(fits[[best_fit_idx]]$estimate)
is_anomaly <- switch(
best_fit,
lognormal = dlnorm(data, meanlog = params$meanlog, sdlog = params$sdlog) < limiar,
exp = dexp(data, rate = params$rate) < limiar,
gamma = dgamma(data, shape = params$shape, rate = params$rate) < limiar,
unif = dunif(data, min = params$min, max = params$max) < limiar,
logis = dlogis(data, location = params$location, scale = params$scale) < limiar,
dnorm(data, mean = params$mean, sd = params$sd) < limiar
)
anomalias <- data[is_anomaly]
return(anomalias))
prob_dist <-  function(data, limiar) {
distribution_list <- c("gamma", "lnorm", "exp", "gamma", "unif", "logis", "norm")
fits <- list()
for (dist in distribution_list) {
tryCatch({
fits[[dist]] <- fitdist(data, dist)
}, error = function(e) {
cat("Error fitting distribution", dist, ": ", conditionMessage(e), "\n")
})
}
gof_stats <- lapply(fits, gofstat)
best_fit_idx <- which.min(sapply(gof_stats, function(x) x$bic))
best_fit <- names(best_fit_idx)
if (is.null(best_fit)) {
fits <- list(
best_fit = "Not Suitable",
gof = NULL,
is_anomaly = FALSE,
anomalias = numeric(0)
)
return(fits)
} else {
best_fit <- strsplit(best_fit, "-")[[1]][3]
}
params <- as.list(fits[[best_fit_idx]]$estimate)
is_anomaly <- switch(
best_fit,
lognormal = dlnorm(data, meanlog = params$meanlog, sdlog = params$sdlog) < limiar,
exp = dexp(data, rate = params$rate) < limiar,
gamma = dgamma(data, shape = params$shape, rate = params$rate) < limiar,
unif = dunif(data, min = params$min, max = params$max) < limiar,
logis = dlogis(data, location = params$location, scale = params$scale) < limiar,
dnorm(data, mean = params$mean, sd = params$sd) < limiar
)
anomalias <- data[is_anomaly]
return(anomalias)
}
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event3_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event3_dist'] <- TRUE
generate_plot(time_series,'predicted_event3_dist','autoencoder')
prob_dist <-  function(data, limiar) {
distribution_list <- c("gamma", "lnorm", "exp", "gamma", "unif", "logis", "norm")
fits <- list()
for (dist in distribution_list) {
tryCatch({
fits[[dist]] <- fitdist(data, dist)
}, error = function(e) {
cat("Error fitting distribution", dist, ": ", conditionMessage(e), "\n")
})
}
gof_stats <- lapply(fits, gofstat)
best_fit_idx <- which.min(sapply(gof_stats, function(x) x$bic))
best_fit <- names(best_fit_idx)
if (is.null(best_fit)) {
fits <- list(
best_fit = "Not Suitable",
gof = NULL,
is_anomaly = FALSE,
anomalias = numeric(0)
)
return(fits)
} else {
best_fit <- strsplit(best_fit, "-")[[1]][3]
}
params <- as.list(fits[[best_fit_idx]]$estimate)
is_anomaly <- switch(
best_fit,
lognormal = dlnorm(data, meanlog = params$meanlog, sdlog = params$sdlog) < limiar,
exp = dexp(data, rate = params$rate) < limiar,
gamma = dgamma(data, shape = params$shape, rate = params$rate) < limiar,
unif = dunif(data, min = params$min, max = params$max) < limiar,
logis = dlogis(data, location = params$location, scale = params$scale) < limiar,
dnorm(data, mean = params$mean, sd = params$sd) < limiar
)
anomalias <- data[is_anomaly]
return(anomalias)
}
data <- time_series[time_series$predicted_event2,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event2_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event2_dist'] <- TRUE
generate_plot(time_series,'predicted_event2_dist','autoencoder')
data <- time_series[time_series$predicted_event3,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event3_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event3_dist'] <- TRUE
generate_plot(time_series,'predicted_event3_dist','autoencoder')
time_series$predicted_event2_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event2_dist'] <- TRUE
generate_plot(time_series,'predicted_event2_dist','dbscan com prob')
generate_plot(time_series,'predicted_event','kmeans')
time_series <- kmeans_func(time_series, 10)
generate_plot(time_series,'predicted_event','kmeans')
data <- time_series[time_series$predicted_event1,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event1_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event1_dist'] <- TRUE
anomalias
prob_dist <-  function(data, limiar) {
distribution_list <- c("gamma", "lnorm", "exp", "gamma", "unif", "logis", "norm")
fits <- list()
for (dist in distribution_list) {
tryCatch({
fits[[dist]] <- fitdist(data, dist)
}, error = function(e) {
cat("Error fitting distribution", dist, ": ", conditionMessage(e), "\n")
})
}
gof_stats <- lapply(fits, gofstat)
best_fit_idx <- which.min(sapply(gof_stats, function(x) x$bic))
best_fit <- names(best_fit_idx)
if (is.null(best_fit)) {
print('No anomalies detected with the given limiar')
return(data)
} else {
best_fit <- strsplit(best_fit, "-")[[1]][3]
}
params <- as.list(fits[[best_fit_idx]]$estimate)
is_anomaly <- switch(
best_fit,
lognormal = dlnorm(data, meanlog = params$meanlog, sdlog = params$sdlog) < limiar,
exp = dexp(data, rate = params$rate) < limiar,
gamma = dgamma(data, shape = params$shape, rate = params$rate) < limiar,
unif = dunif(data, min = params$min, max = params$max) < limiar,
logis = dlogis(data, location = params$location, scale = params$scale) < limiar,
dnorm(data, mean = params$mean, sd = params$sd) < limiar
)
anomalias <- data[is_anomaly]
return(anomalias)
}
data <- time_series[time_series$predicted_event1,'value']
anomalias <- prob_dist(data, 0.2)
data
data <- time_series[time_series$predicted_event,'value']
data
data <- time_series[time_series$predicted_event,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event1_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event_dist'] <- TRUE
generate_plot(time_series,'predicted_event_dist','kmeans com prob')
time_series <- generate_time_series(n = 100,
anomalies_qty = 1,
variance_size = 0.4,
stationary = FALSE,
anomaly_intensity = 6,
window_anomaly = FALSE)
# plot
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value")
time_series <- kmeans_func(time_series, 10)
generate_plot(time_series,'predicted_event','kmeans')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- dbscan_func(time_series, 10,2)
time_series <- dbscan_func(time_series, 10,2)
time_series <- dbscan_func(time_series, 10,2)
time_series <- dbscan_func(time_series, 10,2)
time_series <- dbscan_func(time_series, 10,2)
generate_plot <- function(time_series,predicted_event,model) {
# check if the predicted_event column exists
if (!model %in% colnames(time_series)) {
stop("The column ", predicted_event, " does not exist in the data frame")
}
# Calculate the current range of y-values
y_range <- range(time_series$value)
# Calculate the new limits for the y-axis
new_y_lim <- c(y_range[1] - 0.5 * diff(y_range), y_range[2] + 0.5 * diff(y_range))
# Plot the time series with the detected anomalies
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value", ylim = new_y_lim)
# Add a scatter plot with the detected anomalies
points(which(time_series[,predicted_event]), time_series$value[which(time_series[,predicted_event])], col = "red", pch = 25, cex = 0.8)
points(which(time_series$event), time_series$value[which(time_series$event)], col = "green", pch = 19, cex = 0.5)
# Add a legend to the plot
legend("bottomright", legend = c("Actual Anomalies", "Detected Anomalies"), col = c("green", "red"), pch = c(19, 25), cex = 0.5)
# Add a title to the plot
title(glue("Time Series with Anomalies - {model}"), cex.main = 0.7)
}
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
generate_plot <- function(time_series,predicted_event,model) {
# check if the predicted_event column exists
if (!predicted_event %in% colnames(time_series)) {
stop("The column ", predicted_event, " does not exist in the data frame")
}
# Calculate the current range of y-values
y_range <- range(time_series$value)
# Calculate the new limits for the y-axis
new_y_lim <- c(y_range[1] - 0.5 * diff(y_range), y_range[2] + 0.5 * diff(y_range))
# Plot the time series with the detected anomalies
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value", ylim = new_y_lim)
# Add a scatter plot with the detected anomalies
points(which(time_series[,predicted_event]), time_series$value[which(time_series[,predicted_event])], col = "red", pch = 25, cex = 0.8)
points(which(time_series$event), time_series$value[which(time_series$event)], col = "green", pch = 19, cex = 0.5)
# Add a legend to the plot
legend("bottomright", legend = c("Actual Anomalies", "Detected Anomalies"), col = c("green", "red"), pch = c(19, 25), cex = 0.5)
# Add a title to the plot
title(glue("Time Series with Anomalies - {model}"), cex.main = 0.7)
}
generate_plot(time_series,'predicted_event2','dbscan')
generate_plot <- function(time_series,predicted_event,model) {
# check if the predicted_event column exists
if (!predicted_event %in% colnames(time_series)) {
print("The column ", predicted_event, " does not exist in the data frame")
return()
}
# Calculate the current range of y-values
y_range <- range(time_series$value)
# Calculate the new limits for the y-axis
new_y_lim <- c(y_range[1] - 0.5 * diff(y_range), y_range[2] + 0.5 * diff(y_range))
# Plot the time series with the detected anomalies
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value", ylim = new_y_lim)
# Add a scatter plot with the detected anomalies
points(which(time_series[,predicted_event]), time_series$value[which(time_series[,predicted_event])], col = "red", pch = 25, cex = 0.8)
points(which(time_series$event), time_series$value[which(time_series$event)], col = "green", pch = 19, cex = 0.5)
# Add a legend to the plot
legend("bottomright", legend = c("Actual Anomalies", "Detected Anomalies"), col = c("green", "red"), pch = c(19, 25), cex = 0.5)
# Add a title to the plot
title(glue("Time Series with Anomalies - {model}"), cex.main = 0.7)
}
generate_plot(time_series,'predicted_event2','dbscan')
colnames(time_series)
!'predicted_event2' %in% colnames(time_series)
# check if the predicted_event column exists
if (!'predicted_event2' %in% colnames(time_series)) {
print("The column does not exist in the data frame")
return()
}
generate_plot <- function(time_series,predicted_event,model) {
# check if the predicted_event column exists
if (!predicted_event %in% colnames(time_series)) {
print("The column does not exist in the data frame")
return()
}
# Calculate the current range of y-values
y_range <- range(time_series$value)
# Calculate the new limits for the y-axis
new_y_lim <- c(y_range[1] - 0.5 * diff(y_range), y_range[2] + 0.5 * diff(y_range))
# Plot the time series with the detected anomalies
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value", ylim = new_y_lim)
# Add a scatter plot with the detected anomalies
points(which(time_series[,predicted_event]), time_series$value[which(time_series[,predicted_event])], col = "red", pch = 25, cex = 0.8)
points(which(time_series$event), time_series$value[which(time_series$event)], col = "green", pch = 19, cex = 0.5)
# Add a legend to the plot
legend("bottomright", legend = c("Actual Anomalies", "Detected Anomalies"), col = c("green", "red"), pch = c(19, 25), cex = 0.5)
# Add a title to the plot
title(glue("Time Series with Anomalies - {model}"), cex.main = 0.7)
}
generate_plot(time_series,'predicted_event2','dbscan')
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
kmeans_func <- function(time_series, window) {
# disable the warnings
options(warn = -1)
model <- hanct_kmeans(seq = window, centers = 2)
fitted_model <- fit(model, time_series)
detection <- detect(fitted_model, time_series)
seq_window <- detection %>% filter(event == TRUE)
if (nrow(seq_window) == 0) {
print('No anomalies detected')
return(time_series)
}
seq_window$idx_final <- seq_window$idx+seq_window$seqlen-1
#print(seq_window)
seq_window[seq_window$idx_final > nrow(time_series),'idx_final'] <- nrow(time_series)
time_series$predicted_event <- FALSE
for (i in 1:nrow(seq_window)) {
time_series$predicted_event[seq_window$idx[i]:seq_window$idx_final[i]] <- TRUE
}
return(time_series)
}
generate_plot <- function(time_series,predicted_event,model) {
# check if the predicted_event column exists
if (!predicted_event %in% colnames(time_series)) {
print("The column does not exist in the data frame")
return()
}
# Calculate the current range of y-values
y_range <- range(time_series$value)
# Calculate the new limits for the y-axis
new_y_lim <- c(y_range[1] - 0.5 * diff(y_range), y_range[2] + 0.5 * diff(y_range))
# Plot the time series with the detected anomalies
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value", ylim = new_y_lim)
# Add a scatter plot with the detected anomalies
points(which(time_series[,predicted_event]), time_series$value[which(time_series[,predicted_event])], col = "red", pch = 25, cex = 0.8)
points(which(time_series$event), time_series$value[which(time_series$event)], col = "green", pch = 19, cex = 0.5)
# Add a legend to the plot
legend("bottomright", legend = c("Actual Anomalies", "Detected Anomalies"), col = c("green", "red"), pch = c(19, 25), cex = 0.5)
# Add a title to the plot
title(glue("Time Series with Anomalies - {model}"), cex.main = 0.7)
}
dbscan_func <- function(time_series, window,minPts) {
# Extract time series data with given sliding window size
data_sw <- ts_data(time_series[, 'value'], window)
# Calculate kNN distances
kNNdist <- kNNdist(data_sw, k = minPts)
# Sort the distances in ascending order
sorted_distances <- sort(kNNdist)
# Calculate the percentage change of the sorted distances
percentage_change <- c(0, diff(sorted_distances) / sorted_distances[-length(sorted_distances)] * 100)
# Find the index of the maximum percentage change
max_index <- which.max(percentage_change)
eps <- sorted_distances[max_index]
# Convert data into matrix for dbscan
datamatrix <- matrix(data_sw, ncol = window)
# Perform DBSCAN clustering
dbscanResult <- dbscan::dbscan(datamatrix, eps = eps, minPts = minPts)
# Create a dataframe from datamatrix with clusters
datamatrix_df <- data.frame(datamatrix)
datamatrix_df$clusters <- dbscanResult$cluster
idx <- datamatrix_df[datamatrix_df$clusters == 0,]%>%rownames()%>%as.numeric()
if (length(idx) == 0) {
print('No anomalies detected')
return(time_series)
}
idx_final <- idx+window-1
idx_final[idx_final > nrow(time_series)] <- nrow(time_series)
time_series$predicted_event2 <- FALSE
for (i in 1:length(idx)) {
time_series$predicted_event2[idx[i]:idx_final[i]] <- TRUE
}
return(time_series)
}
autoencoder_func <- function(time_series, window) {
model <- han_autoencoder(1,window)
fitted_model <- fit(model, time_series[,'value'])
detection <- detect(fitted_model,  time_series[,'value'])
seq_window <- detection %>% filter(event == TRUE)
if (nrow(seq_window) == 0) {
print('No anomalies detected')
return(time_series)
}
#print(seq_window)
seq_window$idx_final <- seq_window$idx+window-1
seq_window[seq_window$idx_final > nrow(time_series),'idx_final'] <- nrow(time_series)
#print(seq_window)
time_series$predicted_event3 <- FALSE
for (i in 1:nrow(seq_window)) {
time_series$predicted_event3[seq_window$idx[i]:seq_window$idx_final[i]] <- TRUE
}
return(time_series)
}
prob_dist <-  function(data, limiar) {
distribution_list <- c("gamma", "lnorm", "exp", "gamma", "unif", "logis", "norm")
fits <- list()
for (dist in distribution_list) {
tryCatch({
fits[[dist]] <- fitdist(data, dist)
}, error = function(e) {
cat("Error fitting distribution", dist, ": ", conditionMessage(e), "\n")
})
}
gof_stats <- lapply(fits, gofstat)
best_fit_idx <- which.min(sapply(gof_stats, function(x) x$bic))
best_fit <- names(best_fit_idx)
if (is.null(best_fit)) {
print('No anomalies detected with the given limiar')
return(data)
} else {
best_fit <- strsplit(best_fit, "-")[[1]][3]
}
params <- as.list(fits[[best_fit_idx]]$estimate)
is_anomaly <- switch(
best_fit,
lognormal = dlnorm(data, meanlog = params$meanlog, sdlog = params$sdlog) < limiar,
exp = dexp(data, rate = params$rate) < limiar,
gamma = dgamma(data, shape = params$shape, rate = params$rate) < limiar,
unif = dunif(data, min = params$min, max = params$max) < limiar,
logis = dlogis(data, location = params$location, scale = params$scale) < limiar,
dnorm(data, mean = params$mean, sd = params$sd) < limiar
)
anomalias <- data[is_anomaly]
return(anomalias)
}
time_series <- generate_time_series(n = 100,
anomalies_qty = 1,
variance_size = 0.4,
stationary = FALSE,
anomaly_intensity = 6,
window_anomaly = FALSE)
# plot
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value")
time_series <- kmeans_func(time_series, 10)
generate_plot(time_series,'predicted_event','kmeans')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- autoencoder_func(time_series, 10)
generate_plot(time_series,'predicted_event3','autoencoder')
data <- time_series[time_series$predicted_event,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event1_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event_dist'] <- TRUE
generate_plot(time_series,'predicted_event_dist','kmeans com prob')
data <- time_series[time_series$predicted_event2,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event2_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event2_dist'] <- TRUE
generate_plot(time_series,'predicted_event2_dist','dbscan com prob')
data <- time_series[time_series$predicted_event3,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event3_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event3_dist'] <- TRUE
generate_plot(time_series,'predicted_event3_dist','autoencoder com prob')
time_series <- generate_time_series(n = 100,
anomalies_qty = 1,
variance_size = 0.4,
stationary = FALSE,
anomaly_intensity = 6,
window_anomaly = FALSE)
# plot
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value")
time_series <- kmeans_func(time_series, 10)
time_series <- generate_time_series(n = 100,
anomalies_qty = 1,
variance_size = 0.4,
stationary = FALSE,
anomaly_intensity = 6,
window_anomaly = FALSE)
# plot
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value")
time_series <- generate_time_series(n = 100,
anomalies_qty = 1,
variance_size = 0.4,
stationary = FALSE,
anomaly_intensity = 6,
window_anomaly = FALSE)
# plot
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value")
time_series <- generate_time_series(n = 100,
anomalies_qty = 1,
variance_size = 0.4,
stationary = FALSE,
anomaly_intensity = 6,
window_anomaly = FALSE)
# plot
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value")
time_series <- generate_time_series(n = 100,
anomalies_qty = 1,
variance_size = 0.4,
stationary = FALSE,
anomaly_intensity = 6,
window_anomaly = FALSE)
# plot
plot(time_series$value, type = "l", col = "blue", lwd = 2, xlab = "Time", ylab = "Value")
time_series <- kmeans_func(time_series, 10)
generate_plot(time_series,'predicted_event','kmeans')
time_series <- dbscan_func(time_series, 10,2)
generate_plot(time_series,'predicted_event2','dbscan')
time_series <- autoencoder_func(time_series, 10)
generate_plot(time_series,'predicted_event3','autoencoder')
data <- time_series[time_series$predicted_event,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event1_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event_dist'] <- TRUE
generate_plot(time_series,'predicted_event_dist','kmeans com prob')
data <- time_series[time_series$predicted_event2,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event2_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event2_dist'] <- TRUE
generate_plot(time_series,'predicted_event2_dist','dbscan com prob')
data <- time_series[time_series$predicted_event3,'value']
anomalias <- prob_dist(data, 0.2)
time_series$predicted_event3_dist <- FALSE
time_series[time_series$value==anomalias,'predicted_event3_dist'] <- TRUE
generate_plot(time_series,'predicted_event3_dist','autoencoder com prob')
